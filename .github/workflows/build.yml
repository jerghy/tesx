# .github/workflows/build_wasm.yml

name: Build Rust Wasm

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-    - name: Create new Rust/WASM project      run: |        cargo install cargo-generate        cargo generate --git https://github.com/rustwasm/wasm-pack-template.git --name my_wasm_project    - name: Build project with wasm-pack      working-directory: ./my_wasm_project      run: |        wasm-pack build --release```现在，您可以将上述YAML配置保存为`build_wasm.yml`，并将其放置在您的GitHub仓库的`.github/workflows`目录中。这将创建一个新的工作流，当您向`main`分支推送时，它会自动运行。接下来，您可以在Markdown文件中引用这个工作流，而不会将代码混合在文本中。例如：```markdown# Rust Wasm Build ProcessThis document describes the process of building a Rust WebAssembly project using GitHub Actions.## GitHub Actions WorkflowThe `build_wasm.yml` workflow automates the creation and building of a new Rust/WASM project based on the `wasm-pack-template`. It installs the necessary Rust toolchain, creates a new project, and builds it for WebAssembly.### Usage1. Add the `build_wasm.yml` file to your `.github/workflows` directory.2. Push your changes to the `main` branch to trigger the workflow.For more information on customizing and extending GitHub Actions workflows, refer to the [official documentation](https://docs.github.com/en/actions/learn-github-actions/introduction-to-github-actions).```这样，您就将GitHub Actions工作流配置与Markdown文档内容清晰地分开了。Markdown文档提供了关于工作流的概述和使用说明，而YAML文件包含了实际的工作流配置。
