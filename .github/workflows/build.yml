name: Create and Build Rust WebAssembly Project

on: [push]  # 触发工作流的事件，这里是每次推送到仓库时

jobs:
  create_and_build:
    runs-on: ubuntu-latest  # 运行工作流的GitHub托管环境

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        components: clippy, rustfmt
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          ~/.cargo/bin
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-    - name: Create new Rust/WASM project      run: |        cargo install cargo-generate        cargo generate --git https://github.com/rustwasm/wasm-pack-template.git --name my_wasm_project    - name: Build project with wasm-pack      working-directory: ./my_wasm_project      run: |        wasm-pack build --release```这个工作流包含以下步骤：1. **Checkout repository**：检出触发工作流的代码仓库。2. **Install Rust toolchain**：安装Rust工具链和必要的组件，包括`wasm32-unknown-unknown`目标。3. **Cache cargo registry**：缓存`cargo` registry以加快后续构建速度。4. **Create new Rust/WASM project**：使用`cargo-generate`命令从`wasm-pack-template`创建一个新的Rust/WASM项目。5. **Build project with wasm-pack**：进入新创建的项目目录并使用`wasm-pack build`命令进行构建。请注意，这个工作流假设你有一个有效的`GitHub`仓库，并且你希望在每次推送时自动创建和构建一个新的Rust/WASM项目。如果你想要将构建的结果部署到某个地方，你可能需要添加额外的步骤来处理构建输出，例如使用`actions/upload-artifact`上传构建产物或使用其他部署服务。
